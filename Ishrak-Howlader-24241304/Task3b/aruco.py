# -*- coding: utf-8 -*-
"""ArUco

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18abFb-Bcd3RmXqdel-_0mWBDG1vNZ6u4
"""

# !pip install opencv-contrib-python

import cv2
import cv2.aruco as aruco
import numpy as np
import time
from IPython.display import display, Image # For displaying images in Colab
from google.colab import files # For downloading files

def detect_aruco_markers_optimized(frame, aruco_dict, aruco_params, aruco_detector, display_output=True):
    """
    Detects ArUco markers in a given frame with optimization considerations.

    Args:
        frame (numpy.ndarray): The input image frame (BGR).
        aruco_dict (cv2.aruco.Dictionary): The ArUco dictionary to use.
        aruco_params (cv2.aruco.DetectorParameters): The detector parameters.
        aruco_detector (cv2.aruco.ArucoDetector): The initialized ArUcoDetector object.
        display_output (bool): Whether to draw detected markers on the frame and display.

    Returns:
        tuple: A tuple containing:
            - corners (list): List of detected marker corners.
            - ids (list): List of detected marker IDs.
            - img_display (numpy.ndarray): The frame with markers drawn (if display_output is True).
    """
    if frame is None:
        return [], [], None

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    corners, ids, rejected = aruco_detector.detectMarkers(gray)

    img_display = frame.copy()
    if ids is not None and display_output:
        aruco.drawDetectedMarkers(img_display, corners, ids)
        for i in range(len(ids)):
            marker_id = ids[i][0]
            marker_corners = corners[i][0]
            center_x = int(np.mean(marker_corners[:, 0]))
            center_y = int(np.mean(marker_corners[:, 1]))
            cv2.putText(img_display, str(marker_id), (center_x - 20, center_y - 20),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2) # Green text

    return corners, ids, img_display

if __name__ == "__main__":
    # --- Configuration ---
    aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_ARUCO_ORIGINAL)
    # If the above doesn't work for your physical markers, try other large dictionaries:
    # aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_6X6_1000)
    # aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_5X5_1000)

    aruco_params = aruco.DetectorParameters()
    aruco_params.minMarkerPerimeterRate = 0.02
    aruco_params.polygonalApproxAccuracyRate = 0.08

    detector = aruco.ArucoDetector(aruco_dict, aruco_params)

    # --- Input Image Loading ---
    # Change 'IMG_7649.jpeg' to your uploaded image filename
    image_path = '/content/IMG_7649.jpeg'
    img_input = cv2.imread(image_path)

    # Fallback to generated marker if user's image not found
    if img_input is None:
        marker_id_fallback = 42
        marker_size_fallback = 200
        generated_marker = aruco.generateImageMarker(aruco_dict, marker_id_fallback, marker_size_fallback)
        blank_image = np.zeros((300, 300, 3), dtype=np.uint8) + 255
        x_offset = (blank_image.shape[1] - marker_size_fallback) // 2
        y_offset = (blank_image.shape[0] - marker_size_fallback) // 2
        blank_image[y_offset:y_offset+marker_size_fallback, x_offset:x_offset+marker_size_fallback] = cv2.cvtColor(generated_marker, cv2.COLOR_GRAY2BGR)
        img_input = blank_image
        print(f"Using a generated fallback marker (ID: {marker_id_fallback}).")
    else:
        print(f"Loaded image: {image_path}")

    # --- Marker Detection ---
    corners, ids, img_output = detect_aruco_markers_optimized(img_input, aruco_dict, aruco_params, detector, display_output=True)

    # --- Output Results ---
    if ids is not None:
        print(f"Detected IDs: {ids.flatten()}")
    else:
        print("No ArUco markers detected.")

    # --- Display and Download ---
    if img_output is not None:
        # Convert BGR to RGB for Colab display
        img_output_rgb = cv2.cvtColor(img_output, cv2.COLOR_BGR2RGB)
        print("\nDisplaying processed image:")
        display(Image(data=cv2.imencode('.jpg', img_output_rgb)[1].tobytes()))

        # Save the processed image for download
        download_filename = "detected_aruco_image.jpg"
        cv2.imwrite(download_filename, img_output)
        print(f"Image saved to Colab session as '{download_filename}'.")

        # Trigger download to local machine
        try:
            files.download(download_filename)
            print(f"'{download_filename}' downloaded to your local machine.")
        except Exception as e:
            print(f"Could not download '{download_filename}'. Error: {e}")
    else:
        print("No image to display or download (input image was not valid).")